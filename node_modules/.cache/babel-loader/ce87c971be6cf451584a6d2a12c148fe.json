{"ast":null,"code":"var _jsxFileName = \"/home/kareem/Code/React/portfolio/src/components/Projects.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Accordion from '../patterns/Accordion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst classNames = require('classnames');\n\nconst react = [{\n  title: \"Portfolio\",\n  body1: \"Constantly updating my personal website to keep an accurate record of my projects & accomplishments.\",\n  body2: \"Building this site gave me lots of insight into the world of React development, where I learned concepts including, but not limited to, reusable/configurable components, Router, and useState.\",\n  body3: \"I hope to continue expanding this site in hopes of giving the world an accurate idea of who I am.\"\n}, {\n  title: \"Powerwash\",\n  body1: \"Currently building a business website for a small power washing company.\"\n}];\nconst python = [{\n  title: \"Simple Templating Engine\",\n  body1: \"Takes as input a generic template with placeholders for generic data, a set of input files containing data which should be applied to the template, and a date.\",\n  body2: \"Instantiated templates using the input data will be output to a subdirectory.\"\n}, {\n  title: \"Face Mask Detector\",\n  body1: \"A library and command line utility for detecting face masks in images and video streams.\"\n}, {\n  title: \"Patient Management System\",\n  body1: \"System to keep track of defibrillator patients billing information.\"\n}, {\n  title: \"Fingerprint\",\n  body1: \"Script that will run a sequence of commands in order to determine a unique key for that device.\"\n}, {\n  title: \"RM Command Alternative\",\n  body1: \"Takes an arbitrary number of paths as arguments, and, for each argument, move them to ~/rm_trash.\",\n  body2: \"If ~/rm_trash does not already exist, it should be created.\"\n}, {\n  title: \"Hangman\",\n  body1: \"Terminal hangman game with different categories.\"\n}];\nconst java = [{\n  title: \"Elevator\",\n  body1: \"Implementation of an Elevator. The elevator can travel to floors 1, 2, or 3.\",\n  body2: \"Object oriented design including State and Mediator patterns, along with UML state diagram.\"\n}, {\n  title: \"War\",\n  body1: \"Object-oriented implementation of the card game War, with three different variations to play.\",\n  body2: \"Implemented several GRASP design principles including high cohesion and low coupling, as well as the Liskov Substitution SOLID design principle.\"\n}, {\n  title: \"Drawing\",\n  body1: \"Program that stores an arbitrary sequence of commands that manipulates and uses a drawing list, with a primary focus on creation and maintenance of the drawing list.\",\n  body3: \"Object-oriented design including Strategy, Command, and Memento patterns, along with UML class diagram of project.\"\n}, {\n  title: \"Jurassic Park\",\n  body1: \"Plan and track dinosours in each zone of the park as it develops and opens.\"\n}, {\n  title: \"Starfleet\",\n  body1: \"Application for Starfleet captains to log in and view the crew members about their assigned starship.\"\n}];\nconst c = [{\n  title: \"Memory Management\",\n  body1: \"Simulator that implements the operating system's address translation mechanisms.\",\n  body2: \"Although an OS can usually support multiple processes, this simulator was designed to handle a single process.\"\n}, {\n  title: \"Multilevel Queue Scheduler\",\n  body1: \"Track the simulated processes that currently need to run, then schedule them to run on the CPU according to a set of rules.\"\n}, {\n  title: \"Dining Philosophers\",\n  body1: \"Solution to the famous Dining Philosophers problem using multithreading and concurrent programming techniques.\",\n  body2: \"The problem was the brainchild of Dr. E. W. Dijkstra, in which five philosophers spend their lives simply thinking and eating, to the exclusion of all activities.\"\n}, {\n  title: \"Course Catalog Database\",\n  body1: \"System stores basic information about each course, allowing the user to create, read, update, and delete them.\",\n  body2: \"All information for all courses are stored as binary records in a single file.\"\n}, {\n  title: \"Word Count\",\n  body1: \"Find out the number of words in multiple text files.\"\n}];\n\nconst Projects = () => {\n  _s();\n\n  const [topic, setTopic] = useState('React');\n\n  const changeTopic = e => setTopic(e.target.id);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui inverted secondary pointing menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classNames({\n          \"item\": true,\n          \"active\": topic === \"React\"\n        }),\n        id: \"React\",\n        onClick: changeTopic,\n        children: \"React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classNames({\n          \"item\": true,\n          \"active\": topic === \"Python\"\n        }),\n        id: \"Python\",\n        onClick: changeTopic,\n        children: \"Python\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classNames({\n          \"item\": true,\n          \"active\": topic === \"Java\"\n        }),\n        id: \"Java\",\n        onClick: changeTopic,\n        children: \"Java\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classNames({\n          \"item\": true,\n          \"active\": topic === \"C\"\n        }),\n        id: \"C\",\n        onClick: changeTopic,\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), topic === \"React\" && /*#__PURE__*/_jsxDEV(Accordion, {\n      items: react\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this), topic === \"Python\" && /*#__PURE__*/_jsxDEV(Accordion, {\n      items: python\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this), topic === \"Java\" && /*#__PURE__*/_jsxDEV(Accordion, {\n      items: java\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this), topic === \"C\" && /*#__PURE__*/_jsxDEV(Accordion, {\n      items: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Projects, \"ZF6yKBwmjb1+ksV2eMZw9C4LD80=\");\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/home/kareem/Code/React/portfolio/src/components/Projects.js"],"names":["React","useState","Accordion","classNames","require","react","title","body1","body2","body3","python","java","c","Projects","topic","setTopic","changeTopic","e","target","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Accordion from '../patterns/Accordion';\n\nconst classNames = require('classnames');\n\nconst react = [\n    {\n        title: \"Portfolio\",\n        body1: \"Constantly updating my personal website to keep an accurate record of my projects & accomplishments.\",\n        body2: \"Building this site gave me lots of insight into the world of React development, where I learned concepts including, but not limited to, reusable/configurable components, Router, and useState.\",\n        body3: \"I hope to continue expanding this site in hopes of giving the world an accurate idea of who I am.\"\n    },\n    {\n        title: \"Powerwash\",\n        body1: \"Currently building a business website for a small power washing company.\"\n    }\n];\n\nconst python = [\n    {\n        title: \"Simple Templating Engine\",\n        body1: \"Takes as input a generic template with placeholders for generic data, a set of input files containing data which should be applied to the template, and a date.\",\n        body2: \"Instantiated templates using the input data will be output to a subdirectory.\"\n    },\n    {\n        title: \"Face Mask Detector\",\n        body1: \"A library and command line utility for detecting face masks in images and video streams.\"\n    },\n    {\n        title: \"Patient Management System\",\n        body1: \"System to keep track of defibrillator patients billing information.\"\n    },\n    {\n        title: \"Fingerprint\",\n        body1: \"Script that will run a sequence of commands in order to determine a unique key for that device.\"\n    },\n    {\n        title: \"RM Command Alternative\",\n        body1: \"Takes an arbitrary number of paths as arguments, and, for each argument, move them to ~/rm_trash.\",\n        body2: \"If ~/rm_trash does not already exist, it should be created.\"\n    },\n    {\n        title: \"Hangman\",\n        body1: \"Terminal hangman game with different categories.\"\n    }\n];\n\nconst java = [\n    {\n        title: \"Elevator\",\n        body1: \"Implementation of an Elevator. The elevator can travel to floors 1, 2, or 3.\",\n        body2: \"Object oriented design including State and Mediator patterns, along with UML state diagram.\"\n    },\n    {\n        title: \"War\",\n        body1: \"Object-oriented implementation of the card game War, with three different variations to play.\",\n        body2: \"Implemented several GRASP design principles including high cohesion and low coupling, as well as the Liskov Substitution SOLID design principle.\",\n    },\n    {\n        title: \"Drawing\",\n        body1: \"Program that stores an arbitrary sequence of commands that manipulates and uses a drawing list, with a primary focus on creation and maintenance of the drawing list.\",\n        body3: \"Object-oriented design including Strategy, Command, and Memento patterns, along with UML class diagram of project.\"\n    },\n    {\n        title: \"Jurassic Park\",\n        body1: \"Plan and track dinosours in each zone of the park as it develops and opens.\"\n    },\n    {\n        title: \"Starfleet\",\n        body1: \"Application for Starfleet captains to log in and view the crew members about their assigned starship.\"\n    }\n];\n\nconst c = [\n    {\n        title: \"Memory Management\",\n        body1: \"Simulator that implements the operating system's address translation mechanisms.\",\n        body2: \"Although an OS can usually support multiple processes, this simulator was designed to handle a single process.\"\n    },\n    {\n        title: \"Multilevel Queue Scheduler\",\n        body1: \"Track the simulated processes that currently need to run, then schedule them to run on the CPU according to a set of rules.\"\n    },\n    {\n        title: \"Dining Philosophers\",\n        body1: \"Solution to the famous Dining Philosophers problem using multithreading and concurrent programming techniques.\",\n        body2: \"The problem was the brainchild of Dr. E. W. Dijkstra, in which five philosophers spend their lives simply thinking and eating, to the exclusion of all activities.\"\n    },\n    {\n        title: \"Course Catalog Database\",\n        body1: \"System stores basic information about each course, allowing the user to create, read, update, and delete them.\",\n        body2: \"All information for all courses are stored as binary records in a single file.\"\n    },\n    {\n        title: \"Word Count\",\n        body1: \"Find out the number of words in multiple text files.\"\n    }\n];\n\nconst Projects = () => {\n    const [ topic, setTopic ] = useState('React');\n    \n    const changeTopic = (e) => setTopic(e.target.id);\n\n    return (\n        <div>\n            <h1>Projects</h1>\n            <div className=\"ui inverted secondary pointing menu\">\n                <button className={classNames({\n                    \"item\" : true,\n                    \"active\" : topic===\"React\"\n                })} id=\"React\" onClick={changeTopic}>\n                    React\n                </button>\n                <button className={classNames({\n                    \"item\" : true,\n                    \"active\" : topic===\"Python\"\n                })} id=\"Python\" onClick={changeTopic}>\n                    Python\n                </button>\n                <button className={classNames({\n                    \"item\" : true,\n                    \"active\" : topic===\"Java\"\n                })} id=\"Java\" onClick={changeTopic}>\n                    Java\n                </button>\n                <button className={classNames({\n                    \"item\" : true,\n                    \"active\" : topic===\"C\"\n                })} id=\"C\" onClick={changeTopic}>\n                    C\n                </button>\n            </div>\n            { topic === \"React\" && (\n                <Accordion items={react} />\n            )}\n            { topic === \"Python\" && (\n                <Accordion items={python} />\n            )}\n            { topic === \"Java\" && (\n                <Accordion items={java} />\n            )}\n            { topic === \"C\" && (\n                <Accordion items={c}/>\n\n            )}\n        </div>\n    );\n};\n\nexport default Projects;"]},"metadata":{},"sourceType":"module"}